// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

Texture2D<float4> _ColorGradient;
SamplerState sampler_ColorGradient;
RWTexture2D<float4> _MandelbrotSet;
int _Iterations;
int _Bailout;

float EscapeTime(float2 c)
{
    float2 z = 0;
    z = float2(z.x * z.x - z.y * z.y + c.x, 2 * z.x * z.y + c.y);
    for (int i = 0; i < _Iterations; i++){ 
        z = float2(z.x * z.x - z.y * z.y + c.x, 2 * z.x * z.y + c.y);
        if (length(z) > _Bailout) 
            break;
    }
     
    float  escapeTime = i / float(_Iterations); 
    return escapeTime;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float escapeTime = EscapeTime(id.xy);
    float4 color = _ColorGradient.SampleLevel(sampler_ColorGradient, float2(escapeTime, 0), 0);
    _MandelbrotSet[id.xy] = color;
    
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}

